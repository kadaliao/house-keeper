services:
  backend:
    build:
      context: ./backend
      target: production
    restart: always
    env_file:
      - ./.env.prod
    # 不暴露端口，只通过内部网络访问
    expose:
      - "8000"
    depends_on:
      - db
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      target: production
      args:
        - REACT_APP_API_URL=${API_URL}
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # 挂载SSL证书（如果有）
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # 数据库备份目录
      - ./backups:/backups
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    # 不暴露端口，只通过内部网络访问
    expose:
      - "5432"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    # 使用命名卷，便于备份
    name: house_keeper_postgres_data 